# How to Traverse the DOM Using JavaScript 
DOM traversing describes how to navigate the tree-like structure that HTML documents generate. Here's a complete guide on how to traverse the DOM with JavaScript.  

# What Is DOM Traversing?  

The Document Object Model, or DOM for short, is a tree-like representation of an HTML document. It pro vides an API that allows you, as the web developer, to interact with a website using JavaScript.  

Every item in the DOM is known as a node. Only through the DOM can you manipulate your HTML docu ment structure, content, and style.  

DOM traversal (also called walking or navigating the DOM) is the act of selecting nodes in the DOM tree f rom other nodes. You're probably already familiar with several methods for accessing elements in the DO M tree by their id, class, or tag name. You can use methods like document.querySelector() and document .getElementById() to do so.  

There are other methods you can use in conjunction, to navigate the DOM in more efficient and robust wa ys. As you can imagine, it's better to search from an already-known point on a map than do a full search.  

For example, selecting a child element from its parent is easier and more efficient than searching for it thr oughout the entire tree.  

## A Sample Document to Traverse  

### Once you have access to a given node in the DOM tree, you can access its related nodes in different way s. You can move downwards, upwards, or sideways in the DOM tree from your selected node.  

The first method involves searching for an element starting with a top-most node (like the document node)  and moving downwards.  

The second way is the opposite: you move from an inner element up the tree, searching for an outer elem ent. The last method is when you search for an element from another element at the same level (meaning  the two elements are siblings) in the document tree.  

To demonstrate, consider this example HTML document:  

> HOME  
PROGRAMMING  
How to Traverse the DOM Using JavaScript  
BY  
ALVIN WANJALA  
PUBLISHED OCT 30, 2022  

Walking the DOM is a handy technique you can use in your web apps with just a little practice. 
A large JavaScript logo on a blue background  
Readers like you help support MUO. When you make a purchase using links on our site, we may earn an affiliate commission. Read More.  

Understanding the DOM is essential in your web development career. You should know how to select diff erent elements in the DOM, so you can then read their contents or modify them.  

DOM traversing describes how to navigate the tree-like structure that HTML documents generate. Here's a complete guide on how to traverse the DOM with JavaScript.  

# What Is DOM Traversing?  

The Document Object Model, or DOM for short, is a tree-like representation of an HTML document. It pro vides an API that allows you, as the web developer, to interact with a website using JavaScript.  

# Close  

Every item in the DOM is known as a node. Only through the DOM can you manipulate your HTML docu ment structure, content, and style.  

DOM traversal (also called walking or navigating the DOM) is the act of selecting nodes in the DOM tree f rom other nodes. You're probably already familiar with several methods for accessing elements in the DO M tree by their id, class, or tag name. You can use methods like document.querySelector() and document .getElementById() to do so.  

There are other methods you can use in conjunction, to navigate the DOM in more efficient and robust wa ys. As you can imagine, it's better to search from an already-known point on a map than do a full search.  

For example, selecting a child element from its parent is easier and more efficient than searching for it thr oughout the entire tree.  

# A Sample Document to Traverse  

Once you have access to a given node in the DOM tree, you can access its related nodes in different way s. You can move downwards, upwards, or sideways in the DOM tree from your selected node.  

The first method involves searching for an element starting with a top-most node (like the document node)  and moving downwards.  

The second way is the opposite: you move from an inner element up the tree, searching for an outer elem ent. The last method is when you search for an element from another element at the same level (meaning  the two elements are siblings) in the document tree.  

To demonstrate, consider this example HTML document:  

><!DOCTYPE html>  <html lang="en">  
<head>  
<meta charset="UTF-8" />  
<meta http-equiv="X-UA-Compatible" content="IE=edge" />  
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>Sample page</title>  
</head>  
<body>  
<main>  
<h1>My Page Title</h1>  
<p>Nice caption goes here</p>  
<article class="first\_\_article">  
<h2>List of amazing fruits</h2>          
<p>Must eat fruits</p>  
<div class="wrapper-1">  
<ul class="apple-list">  
<li class="apple">Apples</li>  
<li class="orange">Oranges</li>  
<li class="avocado">Avocados</li>                  
<li class="grape"> 
Grapes  
<ul>  
<li class="type-1">Moon drops</li>                          <li>Sultana</li>  
>Concord</li>  
<li>Crimson Seedless</li>  
</ul>  
</li>  
<li class="banana">Bananas</li>  
</ul>  
<button class="btn-1">Read full list</button>          </div>  
</article>  
<article class="second\_\_article">  
<h2>Amazing places in Kenya</h2>          <p>Must visit places in Kenya</p>  
<div class="wrapper-2">  
<ul class="places-list">  
<li>Maasai Mara</li>  
<li>Diani Beach</li>  
<li>Watamu Beach</li>  
<li>Amboseli national park</li>                  <li>Lake Nakuru</li>  
</ul>  
<button class="btn-2">Read full list</button>          </div>  
</article>  
</main>  
</body>  
</html>  

# Traversing the DOM Downwards  

You can traverse the DOM downwards using one of two methods. The first one is the common selector m ethod (element.querySelector or element.querySelectorAll). Secondly, you can use the children or childN odes property. There are also two other special properties, namely, lastChild and firstChild.  

# Using Selector Methods  

The querySelector() methods allow you to search for one or more elements that match a given selector. F or example, you can search for the first element with a class of "first-article" using document.querySelecto r('.first-article'). And to fetch all h2 elements in the document, you can use the querySelectorAll method: d ocument.querySelectorAll('h2'). The querySelectorAll method returns a node list of matching elements; yo u can select each item using bracket notation:  

const headings = document.querySelectorAll('h2');  

const firstHeading = headings[0]; // selecting the first h2 element  

const secondHeading = headings[1]; // selecting the second h2 element  


# How to Traverse the DOM Using JavaScript  

BY  
ALVIN WANJALA  
PUBLISHED OCT 30, 2022  

Walking the DOM is a handy technique you can use in your web apps with just a little practice. 
A large JavaScript logo on a blue background  

Readers like you help support MUO. When you make a purchase using links on our site, we may earn an affiliate commission. Read More.  

Understanding the DOM is essential in your web development career. You should know how to select diff erent elements in the DOM, so you can then read their contents or modify them.  

DOM traversing describes how to navigate the tree-like structure that HTML documents generate. Here's a complete guide on how to traverse the DOM with JavaScript.  

# What Is DOM Traversing?  

The Document Object Model, or DOM for short, is a tree-like representation of an HTML document. It pro vides an API that allows you, as the web developer, to interact with a website using JavaScript.  

# Close  

Every item in the DOM is known as a node. Only through the DOM can you manipulate your HTML docu ment structure, content, and style.  

DOM traversal (also called walking or navigating the DOM) is the act of selecting nodes in the DOM tree f rom other nodes. You're probably already familiar with several methods for accessing elements in the DO M tree by their id, class, or tag name. You can use methods like document.querySelector() and document .getElementById() to do so.  

There are other methods you can use in conjunction, to navigate the DOM in more efficient and robust wa ys. As you can imagine, it's better to search from an already-known point on a map than do a full search.  

For example, selecting a child element from its parent is easier and more efficient than searching for it thr oughout the entire tree.  

# A Sample Document to Traverse  

Once you have access to a given node in the DOM tree, you can access its related nodes in different way s. You can move downwards, upwards, or sideways in the DOM tree from your selected node.  

The first method involves searching for an element starting with a top-most node (like the document node)  and moving downwards.  

The second way is the opposite: you move from an inner element up the tree, searching for an outer elem ent. The last method is when you search for an element from another element at the same level (meaning  the two elements are siblings) in the document tree.  

To demonstrate, consider this example HTML document:  

><!DOCTYPE html>  <html lang="en">  
<head>  
<meta charset="UTF-8" />  
<meta http-equiv="X-UA-Compatible" content="IE=edge" />      
<meta name="viewport" content="width=device-width, initial-scale=1.0" />      
<title>Sample page</title>  
</head>  
<body>  
<main>  
<h1>My Page Title</h1>  
<p>Nice caption goes here</p>  
<article class="first\_\_article">  
<h2>List of amazing fruits</h2>         
<p>Must eat fruits</p>  
<div class="wrapper-1">  
<ul class="apple-list">  
<li class="apple">Apples</li>  
<li class="orange">Oranges</li>  
<li class="avocado">Avocados</li>                 
<li class="grape">  
Grapes  
<ul>  
<li class="type-1">Moon drops</li>                          
<li>Sultana</li>  
<li>Concord</li>  
<li>Crimson Seedless</li>  
</ul>  
</li>  
<li class="banana">Bananas</li>  
</ul>  
<button class="btn-1">Read full list</button>          
</div>  
</article>  
<article class="second\_\_article">  
<h2>Amazing places in Kenya</h2>          
<p>Must visit places in Kenya</p>  
<div class="wrapper-2">  
<ul class="places-list">  
<li>Maasai Mara</li>  
<li>Diani Beach</li>  
<li>Watamu Beach</li>  
<li>Amboseli national park</li>                  
<li>Lake Nakuru</li>  
</ul>  
<button class="btn-2">Read full list</button>
</div>  
</article>  
</main>  
</body>  
</html>  

# Traversing the DOM Downwards  

You can traverse the DOM downwards using one of two methods. The first one is the common selector m ethod (element.querySelector or element.querySelectorAll). Secondly, you can use the children or childN odes property. There are also two other special properties, namely, lastChild and firstChild.  

### Using Selector Methods  

The querySelector() methods allow you to search for one or more elements that match a given selector. F or example, you can search for the first element with a class of "first-article" using document.querySelecto r('.first-article'). And to fetch all h2 elements in the document, you can use the querySelectorAll method: d ocument.querySelectorAll('h2'). The querySelectorAll method returns a node list of matching elements; yo u can select each item using bracket notation:  

const headings = document.querySelectorAll('h2');  

const firstHeading = headings[0]; // selecting the first h2 element  

const secondHeading = headings[1]; // selecting the second h2 element  

The major catch when using selector methods is you must use the appropriate symbols, where applicable , before the selector as you do in CSS. For example, ".classname" for classes and "#id" for ids.  

Remember the result will be an HTML element, not just the inner content of the selected element. To acc ess the content you can use the node's innerHTML property:  

document.querySelector('.orange').innerHTML  

Using the children or childNodes Properties  

The children property selects all child elements that are directly under a given element. Here's an exampl e of the children property in action:  

>const appleList = document.querySelector('.apple-list');  
const apples = appleList.children;   
console.log(apples);  

Logging apples to the console will display a set of all list items directly under the element with an "apple-li st" class as an HTML collection. An HTML collection is an array-like object, so you can use bracket notati on to select items, as with querySelectorAll.  

Unlike the children property, childNodes returns all direct child nodes (not just child elements). If you are o nly interested in child elements, say list items only, use the children property.  

### Using Special lastChild and firstChild Properties  

These two methods are not as robust as the first two. As their names suggest, the lastChild and firstChild properties return an element's last and first child nodes.  

    >const appleList = document.querySelector('.apple-list');  
    const firstChild = appleList.firstChild;  
    const lastChild = appleList.lastChild;  

### Traversing the DOM Upwards  

You can navigate up the DOM using the parentElement (or parentNode) and closest properties.  

Using parentElement or parentNode  

Both parentElement or parentNode properties let you select the selected element's parent node one level up. The critical difference is that parentElement only chooses the parent node that is an element. On the other hand, parentNode can select a parent regardless of whether it's an element or a different node type.

In the code sample below, we use parentElement to select the div with the "wrapper-1" class from "apple-l ist":  

>const appleList = document.querySelector('.apple-list');  
const parentDiv = appleList.parentElement;   
console.log(parentDiv); // displays div element with class wrapper-1  

### Using the closest Property  

The closest property selects the first parent element that matches a specified selector. It lets you select m ultiple levels up instead of one. For instance, if we already have the button with class "btn-1" selected, we can select the main element using the closest property as follows:  

>const btn1 = document.querySelector('.btn-1');  
const mainEl = btn1.closest('main');  
console.log(mainEl); // displays main element  

Like querySelector and querySelectorAll, use appropriate selectors in the closest method.  

### Traversing the DOM Sideways  

There are two methods available for walking the DOM sideways. You can use nextElementSibling or previ ousElementSibling. Use nextElementSibling to select the following sibling element and previousElementSi bling to select the previous sibling.  

>const orange = document.querySelector('.orange');  
const apple = orange.previousElementSibling;  
const avocado = orange.nextElementSibling;   

There are also equivalent nextSibling and previousSibling properties that also select from all node types, not just elements.  

### Do More by Chaining DOM Traversal Properties and Methods  

All the methods and properties above can enable you to select any node in the DOM. However, in some c ases, you might want to move up first, then down or sideways. In that case, chaining different properties t ogether will prove handy.
